{"version":3,"sources":["components/Welcome.js","components/Header.js","components/Persons.js","App.js","serviceWorker.js","index.js"],"names":["Welcome","props","this","username","Component","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","Header","classes","className","AppBar","position","Toolbar","Typography","variant","Persons","state","items","isLoaded","fetch","then","res","json","setState","map","item","Card","CardContent","id","name","email","website","phone","address","city","App","userLogin","btnLogin","getUserLogin","changeInputText","event","target","value","Container","maxWidth","Button","color","onClick","TextField","label","onChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"gQAeeA,G,2KARJC,GACH,OACA,6BAAK,sCAAYC,KAAKD,MAAME,e,GAJdC,c,gCCEhBC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAaJ,EAAMK,QAAQ,IAE7BC,MAAO,CACLJ,SAAU,OAIC,SAASK,IACtB,IAAMC,EAAUV,IAEhB,OACE,yBAAKW,UAAWD,EAAQP,MACtB,kBAACS,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KAEE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKL,UAAWD,EAAQF,OAA5C,mB,4CCuCKS,E,4MA5DfC,MAAQ,CACJC,MAAO,GACPC,UAAU,G,kEAIO,IAAD,OAChBC,MAAM,8CACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GACF,EAAKC,SAAS,CACVL,UAAU,EACVD,MAAOK,S,+BAQL,IAAD,EACW3B,KAAKqB,MAAxBE,EADQ,EACRA,SAAUD,EADF,EACEA,MAEP,OACI,6BACKC,EACD,6BACI,qDAMKD,EAAMO,KAAI,SAAAC,GAAI,OACX,kBAACC,EAAA,EAAD,CAAMjB,UAAU,WAChB,kBAACkB,EAAA,EAAD,CAAaC,GAAIH,EAAKG,IACtB,4BAAKH,EAAKI,MACV,2BAAG,wCAAH,IAAqBJ,EAAK7B,UAC1B,2BAAG,qCAAH,IAAkB6B,EAAKK,OACvB,2BAAG,uCAAH,IAAoBL,EAAKM,SACzB,2BAAG,qCAAH,IAAkBN,EAAKO,OAC3B,2BAAG,oCAAH,IAAiBP,EAAKQ,QAAQC,YAapC,2D,GAvDIrC,aC2EPsC,E,4MAvEbnB,MAAQ,CAENoB,WAAW,EACXxC,SAAU,M,EAGbyC,SAAW,WACT,IAAMC,EAAe,EAAKtB,MAAMoB,UACjC,EAAKb,SACH,CACEa,WAAYE,K,EAKlBC,gBAAkB,SAACC,GACjB,EAAKjB,SAAS,CACZ3B,SAAU4C,EAAMC,OAAOC,S,uDAOzB,OACA,6BAEG,kBAACnC,EAAD,MACA,kBAACoC,EAAA,EAAD,CAAWC,SAAS,MAQnBjD,KAAKqB,MAAMoB,UACX,6BAEC,kBAAC,EAAD,CAASxC,SAAUD,KAAKqB,MAAMpB,UAA9B,KAEA,kBAAC,EAAD,MACC,6BACA,kBAACiD,EAAA,EAAD,CAAQ/B,QAAQ,YAAYgC,MAAM,YAAYC,QAASpD,KAAK0C,UAA5D,WAQF,6BACG,kBAACW,EAAA,EAAD,CAAWpB,GAAG,iBAAiBqB,MAAM,iBAAiBC,SAAUvD,KAAK4C,kBAE9E,6BACA,6BACM,kBAACM,EAAA,EAAD,CAAQ/B,QAAQ,YAAYgC,MAAM,UAAUC,QAASpD,KAAK0C,UAA1D,SAKA,6BACE,8D,GAhEUxC,aCKEsD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3C,MAAK,SAAA4C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.876a1acc.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n\r\n\r\n\r\nclass Welcome extends Component{\r\n\r\n    render(props){\r\n        return(\r\n        <div><p>Welcome {this.props.username}</p>\r\n           \r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Welcome","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nexport default function Header() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n         \r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            My First App\r\n          </Typography>\r\n         \r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\n\r\nclass Persons extends Component {\r\nstate = {\r\n    items: [],\r\n    isLoaded: false\r\n\r\n}\r\n\r\ncomponentDidMount() {\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(res => res.json())\r\n    .then(json => {\r\n        this.setState({\r\n            isLoaded: true,\r\n            items: json\r\n        }\r\n        )\r\n    }\r\n    )\r\n}\r\n\r\n\r\n    render() {\r\nlet {isLoaded, items} = this.state;\r\n\r\n        return (\r\n            <div>\r\n                {isLoaded ? \r\n                <div>\r\n                    <p>Loading data from api:</p>\r\n\r\n                    \r\n\r\n\r\n                    \r\n                        {items.map(item => (\r\n                            <Card className=\"spacing\">\r\n                            <CardContent id={item.id}>\r\n                            <h5>{item.name}</h5>\r\n                            <p><b>Username:</b> {item.username}</p>\r\n                            <p><b>Email:</b> {item.email}</p>\r\n                            <p><b>Website:</b> {item.website}</p>\r\n                            <p><b>Phone:</b> {item.phone}</p>\r\n                        <p><b>City:</b> {item.address.city}</p>\r\n                            </CardContent>\r\n                            </Card>\r\n                        ))}\r\n                       \r\n                   \r\n\r\n\r\n\r\n\r\n                   \r\n                    </div>\r\n                \r\n                : <div>Data still Loading...</div>} \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Persons;","import React, { Component } from 'react';\nimport './App.css';\nimport Welcome from './components/Welcome'\nimport Header from './components/Header'\nimport {Container, Button, TextField} from '@material-ui/core/'\n\nimport Persons from './components/Persons'\nclass App extends Component{\n\n  state = {\n\n    userLogin: false, //user isnt login when page load\n    username: null\n }\n\n btnLogin = () => {\n   const getUserLogin = this.state.userLogin\n  this.setState(\n    {\n      userLogin: !getUserLogin\n    }\n  )\n}\n\nchangeInputText = (event) => {\n  this.setState({\n    username: event.target.value\n\n  })\n}\n\n\nrender(){\n  return(\n  <div>\n    \n     <Header></Header>\n     <Container maxWidth=\"lg\">\n\n\n\n\n\n       \n    {\n      this.state.userLogin ?\n      <div>\n       \n       <Welcome username={this.state.username}> </Welcome>\n\n       <Persons></Persons>\n        <br />\n        <Button variant=\"contained\" color=\"secondary\" onClick={this.btnLogin}>\n        Logout\n      </Button>\n\n      </div>\n      : \n\n\n      <div>\n         <TextField id=\"standard-basic\" label=\"Enter Username\" onChange={this.changeInputText}/>\n    \n<br/>\n<br/>\n      <Button variant=\"contained\" color=\"primary\" onClick={this.btnLogin}>\n        Login\n      </Button>\n\n      \n      <br/>\n        <p>Please login to continue</p>\n      </div>\n\n    }\n    </Container>\n  </div>\n\n  )}}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}